"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableInternal = void 0;
const internal_table_printer_1 = require("./internal-table-printer");
const table_constants_1 = require("../utils/table-constants");
const table_helpers_1 = require("../utils/table-helpers");
const defaultRowSortFunc = () => 0;
const defaultRowFilterFunc = () => true;
function objIfExists(key, val) {
    if (!val) {
        return {};
    }
    return {
        [key]: val,
    };
}
class TableInternal {
    constructor(options) {
        // default construction
        this.rows = [];
        this.columns = [];
        this.title = undefined;
        this.tableStyle = table_constants_1.TABLE_STYLE.thinBorder;
        this.style = table_constants_1.TABLE_BORDER_STYLES.thinBorder;
        this.filterFunction = defaultRowFilterFunc;
        this.sortFunction = defaultRowSortFunc;
        if (options instanceof Array) {
            this.initSimple(options);
        }
        else if (typeof options === 'object') {
            this.initDetailed(options);
        }
    }
    initSimple(columns) {
        this.columns = columns.map((column) => ({
            name: column,
            alignment: table_constants_1.ALIGNMENT.right,
        }));
    }
    initDetailed(options) {
        var _a;
        this.title = options.title || undefined;
        this.tableStyle =
            ((options === null || options === void 0 ? void 0 : options.style) && table_constants_1.TABLE_STYLE[options.style]) ||
                table_constants_1.TABLE_STYLE.thinBorder;
        this.sortFunction = (options === null || options === void 0 ? void 0 : options.sort) || defaultRowSortFunc;
        this.filterFunction = (options === null || options === void 0 ? void 0 : options.filter) || defaultRowFilterFunc;
        this.columns =
            ((_a = options.columns) === null || _a === void 0 ? void 0 : _a.map((column) => (Object.assign(Object.assign({ name: column.name }, objIfExists('color', column.color && table_constants_1.COLOR[column.color])), { alignment: table_constants_1.ALIGNMENT[column.alignment || table_constants_1.ALIGNMENT.right] })))) || [];
    }
    createColumnFromRow(text) {
        const colNames = this.columns.map((col) => col.name);
        Object.keys(text).forEach((key) => {
            if (!colNames.includes(key)) {
                this.columns.push(table_helpers_1.createColum(key));
            }
        });
    }
    addColumn(text) {
        this.columns.push(table_helpers_1.createColum(text));
    }
    addColumns(toBeInsertedColumns) {
        toBeInsertedColumns.forEach((toBeInsertedColumn) => {
            this.addColumn(toBeInsertedColumn);
        });
    }
    addRow(text, options) {
        this.createColumnFromRow(text);
        this.rows.push(table_helpers_1.createRow((options === null || options === void 0 ? void 0 : options.color) || table_constants_1.COLOR.white, text));
    }
    addRows(toBeInsertedRows) {
        toBeInsertedRows.forEach((toBeInsertedRow) => {
            this.addRow(toBeInsertedRow, undefined);
        });
    }
    printTable() {
        return internal_table_printer_1.printTable(this);
    }
}
exports.TableInternal = TableInternal;
