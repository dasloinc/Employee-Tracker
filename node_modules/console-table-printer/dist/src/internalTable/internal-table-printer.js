"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printSimpleTable = exports.printSimpleTableAndGetConsoleOutput = exports.printTable = exports.printTableAndGetConsoleOutput = void 0;
const colored_console_line_1 = require("../utils/colored-console-line");
const internal_table_1 = require("./internal-table");
const table_constants_1 = require("../utils/table-constants");
const table_helpers_1 = require("../utils/table-helpers");
function prepareLineAndPrint(tableStyle, columns, row, isHeader) {
    const line = new colored_console_line_1.default();
    line.addWithColor(table_constants_1.COLOR.white, tableStyle.vertical);
    columns.forEach((column) => {
        line.addWithColor(table_constants_1.COLOR.white, ' ');
        line.addWithColor((isHeader && table_constants_1.COLOR.white_bold) || column.color || row.color, // column color is priotized as row color
        table_helpers_1.textWithPadding(`${table_helpers_1.cellText(row.text[column.name])}`, column.alignment || table_constants_1.ALIGNMENT.right, column.max_ln || 20));
        line.addWithColor(table_constants_1.COLOR.white, ` ${tableStyle.vertical}`);
    });
    return line.printConsole();
}
// ║ 1     ║     I would like some red wine please ║ 10.212 ║
function printRow(table, row) {
    const ret = [];
    ret.push(prepareLineAndPrint(table.tableStyle, table.columns, row));
    return ret;
}
/*
                  The analysis Result
 ╔═══════╦═══════════════════════════════════════╦════════╗
*/
function printTableTitle(table) {
    const ret = [];
    if (table.title === undefined) {
        return ret;
    }
    const getTableWidth = () => {
        const reducer = (accumulator, currentValue) => accumulator + currentValue + 1;
        return table.columns.map((m) => m.max_ln || 20).reduce(reducer, 1);
    };
    const titleWithPadding = table_helpers_1.textWithPadding(table.title, table_constants_1.ALIGNMENT.center, getTableWidth());
    const styledText = new colored_console_line_1.default();
    styledText.addWithColor(table_constants_1.COLOR.white_bold, titleWithPadding);
    //                  The analysis Result
    ret.push(styledText.printConsole());
    return ret;
}
/*
 ╔═══════╦═══════════════════════════════════════╦════════╗
 ║ index ║                                  text ║  value ║
 ╟═══════╬═══════════════════════════════════════╬════════╢
*/
function printTableHeaders(table) {
    const ret = [];
    // ╔═══════╦═══════════════════════════════════════╦════════╗
    ret.push(table_helpers_1.printTableHorizontalBorders(table.tableStyle.headerTop, table.columns.map((m) => m.max_ln || 20)));
    // ║ index ║                                  text ║  value ║
    const row = table_helpers_1.createHeaderAsRow(table_helpers_1.createRow, table.columns);
    ret.push(prepareLineAndPrint(table.tableStyle, table.columns, row, true));
    // ╟═══════╬═══════════════════════════════════════╬════════╢
    ret.push(table_helpers_1.printTableHorizontalBorders(table.tableStyle.headerBottom, table.columns.map((m) => m.max_ln || 20)));
    return ret;
}
function printTableEnding(table) {
    const ret = [];
    // ╚═══════╩═══════════════════════════════════════╩════════╝
    ret.push(table_helpers_1.printTableHorizontalBorders(table.tableStyle.tableBottom, table.columns.map((m) => m.max_ln || 20)));
    return ret;
}
function calculateColumnProperty(table) {
    table.columns.forEach((column) => {
        // eslint-disable-next-line no-param-reassign
        column.max_ln = table_helpers_1.findMaxLenOfColumn(column, table.rows);
    });
}
function printTableAndGetConsoleOutput(table) {
    calculateColumnProperty(table);
    // eslint-disable-next-line no-param-reassign
    table.rows = table_helpers_1.preProcessRows(table.rows, table.filterFunction, table.sortFunction); // sort and filter
    const ret = [];
    printTableTitle(table).forEach((row) => ret.push(row));
    printTableHeaders(table).forEach((row) => ret.push(row));
    table.rows.forEach((row) => {
        printRow(table, row).forEach((row_) => ret.push(row_));
    });
    printTableEnding(table).forEach((row) => ret.push(row));
    return ret;
}
exports.printTableAndGetConsoleOutput = printTableAndGetConsoleOutput;
function printTable(table) {
    printTableAndGetConsoleOutput(table);
}
exports.printTable = printTable;
function printSimpleTableAndGetConsoleOutput(rows) {
    const table = new internal_table_1.TableInternal();
    table.addRows(rows);
    return printTableAndGetConsoleOutput(table);
}
exports.printSimpleTableAndGetConsoleOutput = printSimpleTableAndGetConsoleOutput;
function printSimpleTable(rows) {
    printSimpleTableAndGetConsoleOutput(rows);
}
exports.printSimpleTable = printSimpleTable;
